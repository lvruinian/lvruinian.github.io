<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/20/flex%E5%B8%83%E5%B1%80/"/>
    <url>/2022/07/20/flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>display:flex;</p><p>主轴的方向（项目的排列方向）<br>flex-direction：row | row-reverse | column | column-reverse</p><p>项目排列在轴线上的排列方式<br>flex-wrap：nowrap | wrap | wrap-reverse</p><ul><li>nowrap（默认）不换行</li><li>wrap 换行，第一行在上方</li><li>wrap-reverse 换行，第一行在下方</li></ul><p>flex-flow是flex-direction和flex-wrap的简写，默认值为row nowrap<br>flex-flow：&lt; flex-direction &gt; || &lt; flex-wrap &gt;</p><p>定义项目在主轴的对齐方式<br>justify-content：flex-start | flex-end | center | space-between | space-around</p><ul><li>flex-start （默认值） 左对齐</li><li>flex-end 右对齐</li><li>center 居中</li><li>space-between 两端对齐，项目之间间隔相等</li><li>space-around 每个项目两侧的间隔相等，所以，项目之间的间隔比项目与边框的间隔大一倍</li></ul><p>定义项目在交叉轴的对齐方式<br>align-items：flex-start | flex-end | center | baseline | stretch</p><ul><li>flex-start 交叉轴的起点对齐</li><li>flex-end 交叉轴的终点对齐</li><li>center 交叉轴的中点对齐</li><li>baseline 第一行文字基线对齐</li><li>stretch（默认值） 如果项目未设置高度或设为auto，将占满整个容器的高度</li></ul><p>定义多根轴线的对齐方式（若只有一根轴线，则此属性不生效）<br>align-content：flex-start | flex-end | center | space-between | space-around | stretch</p><ul><li>flex-start 与交叉轴起点对齐</li><li>flex-end 与交叉轴的终点对齐</li><li>center 于交叉轴的中点对齐</li><li>space-between 与交叉轴两段对齐，轴线之间间隔平均分布</li><li>space-around 每根轴线两侧的间隔都相等，所以，项目之间的间隔比项目与边框的间隔大一倍</li><li>stretch（默认值）轴线占满整个交叉轴</li></ul><p><strong>项目的属性</strong></p><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0<br>order:&lt; integer &gt;  </p><p>flex-grow 属性定义项目的放大比例，默认为 0 ，即如果存在剩余空间，也不放大<br>flex-grow:&lt; number &gt;</p><p>flex-shrink 属性定义了项目的缩小比例，默认为1（负值无效），即如果空间不足，该项目将缩小<br>flex-shrink:&lt; number &gt;</p><p>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size），浏览器根据这个属性，计算主轴是否有多余空间，它的默认值为auto，即项目的本来大小<br>flex-basis:&lt; length &gt; | auto;<br>可以设为width或height属性一样的值，项目将占据固定空间</p><p>flex属性是flex-grow,flex-shrink,flex-basis的简写，默认值为 0 1 auto，后两个属性可选<br>flex:&lt;’flex-grow’&gt; &lt;’flex-shrink’&gt; &lt;’flex-basis’&gt;<br>该属性有两个快捷键：auto(1 1 auto) 和 none(0 0 auto)<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</p><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-item属性，（默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch）<br>align-self:auto | flex-start | flex-end | center | baseline | stretch</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>知识点杂货铺</title>
    <link href="/2021/04/15/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    <url>/2021/04/15/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%9D%82%E8%B4%A7%E9%93%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="JS-剩余参数和arguments对象的区别"><a href="#JS-剩余参数和arguments对象的区别" class="headerlink" title="JS 剩余参数和arguments对象的区别"></a>JS 剩余参数和arguments对象的区别</h3><p>剩余参数和 arguments对象之间的区别主要有三个：</p><ul><li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参。</li><li>arguments对象不是一个真正的数组，而剩余参数是真正的 Array实例，也就是说你能够在它上面直接使用所有的数组方法，比如 sort，map，forEach或pop。</li><li>arguments对象还有一些附加的属性 （如callee属性）</li></ul><h3 id="CSS-浏览器前缀"><a href="#CSS-浏览器前缀" class="headerlink" title="CSS 浏览器前缀"></a>CSS 浏览器前缀</h3><p>-moz-：Firefox<br>-webkit-：Safari 和 Chrome<br>-o-：Opera</p><h3 id="地址栏输入一个URL到页面呈现，中间会发生什么"><a href="#地址栏输入一个URL到页面呈现，中间会发生什么" class="headerlink" title="地址栏输入一个URL到页面呈现，中间会发生什么"></a>地址栏输入一个URL到页面呈现，中间会发生什么</h3><p>输入URL，需要找到这个URL域名的服务器IP，浏览器首先会查找<strong>缓存</strong>，查看缓存中是否有记录<br>缓存的查找记录为：浏览器缓存 -&gt; 系统缓存 -&gt; 路由器缓存<br>缓存中若没有则去查找<strong>系统hosts文件</strong>中是否有记录，若没有则查询<strong>DNS服务器</strong><br>得到服务器IP地址后，浏览器根据IP及端口号，构造一个http请求，这个请求报文会包含请求信息，将这个http请求封装在一个<strong>tcp包</strong>中，tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器，服务器解析这个请求来作出响应，返回相应的html给服务器<br>因为html是一个树形结构，浏览器根据html构建<strong>dom树</strong>，在dom树的构建过程中如果与遇到JS脚本和外部JS链接，则会停止构建DOM树去执行和下载其它的代码，造成堵塞，这也是为什么推荐JS代码放在html代码的后面，之后根据外部/内部/内联样式，构建一个<strong>CSS对象模型树（CSSOM树）</strong>，构建完成后和DOM树合并为渲染树，这里主要做的是排除非视觉节点，比如script，meta标签和排除display为none的节点，之后进行布局，布局主要是确定各个元素的位置和尺寸，之后是渲染页面，因为html文件中会含有图片，视频，音频等资源，在解析DOM的过程中，遇到这些都会<strong>并行下载</strong>，浏览器对每个域的并行下载有限制，一般是4-6个，其中我们需要关注缓存，一般通过Cache-Control,Last-Modify,Expires等首部字段控制。</p><p>Cache-Control和Expires的区别在于前者使用相对时间，后者使用基于服务器的绝对时间，因为存在时差问题，一般采用前者，请求设置了缓存的数据时，会先查看是否过期，如果没有过期则直接使用本地缓存，过期则请求并在服务器校验文件是否修改，如果上次响应设置了ETag值会在这次请求时作为If-None-Match的值交给服务器校验，如果一致，继续校验Last-Modified，没有设置Etag则直接验证Last-Modified，再决定是否返回<strong>304</strong></p><h3 id="简单说一下cookie，localStorage，sessionStorage的区别"><a href="#简单说一下cookie，localStorage，sessionStorage的区别" class="headerlink" title="简单说一下cookie，localStorage，sessionStorage的区别"></a>简单说一下cookie，localStorage，sessionStorage的区别</h3><p><strong>cookie</strong><br><strong>生命周期：</strong> 可设置失效时间，默认为关闭浏览器后失效<br><strong>存放数据：</strong> 4K左右<br><strong>http请求：</strong> 携带在http头中，如果使用cookie保存过多数据会带来性能问题<br><strong>易用性：</strong> 需要自己封装，原生接口不友好</p><p><strong>localStorage</strong><br><strong>生命周期：</strong> 除非被手动清除，否则永久保存<br><strong>存放数据：</strong> 5M左右<br><strong>http请求：</strong> 保存在客户端即浏览器，不与服务器通信<br><strong>易用性：</strong> 采用原生接口，可自己封装</p><p><strong>sessionStorage</strong><br><strong>生命周期：</strong> 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除<br><strong>存放数据：</strong> 5M左右<br><strong>http请求：</strong> 保存在客户端即浏览器，不与服务器通信<br><strong>易用性：</strong> 采用原生接口，可自己封装</p><p><strong>应用场景</strong><br>http请求携带cookie信息，浪费带宽，尽可能少用，此外cookie需要指定作用域，不可以跨域使用，限制很多，但对于识别用户登录来说，cookie还是比storage好用，其他情况下可以用storage，localStorage在页面传递参数，sessionStorage可以保存一些临时数据，防止刷新页面后丢失了一些参数</p><h2 id="web性能优化"><a href="#web性能优化" class="headerlink" title="web性能优化"></a>web性能优化</h2><ul><li>降低请求量：合并资源，减少http请求数量，minify/gzip压缩，webp，lazyLoad  </li><li>加快请求速度：预解析DNS，减少域名树，并行加载，CDN分发 </li><li>缓存：http协议缓存请求，离线缓存manifest，离线数据缓存localStorage  </li><li>渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>推荐几款不错的vscode主题</title>
    <link href="/2021/03/21/vscode%E4%B8%BB%E9%A2%98/"/>
    <url>/2021/03/21/vscode%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="推荐几款不错的vscode主题"><a href="#推荐几款不错的vscode主题" class="headerlink" title="推荐几款不错的vscode主题"></a>推荐几款不错的vscode主题</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><ul><li>One Dark Pro</li><li>Brackets Light Pro </li></ul><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><ul><li>VSCode Great Icons（图标）</li><li>vscode-icons（图标） </li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo初使用</title>
    <link href="/2021/03/21/Hexo%E5%88%9D%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/03/21/Hexo%E5%88%9D%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo初使用"><a href="#Hexo初使用" class="headerlink" title="Hexo初使用"></a>Hexo初使用</h2><blockquote><p>Hexo这个博客框架给人的第一印象是轻量，使用markdown语法编写，采用静态页面的方式，可直接部署到github管理，支持插件扩展<br>还有一些特性有待挖掘<br><a href="https://hexo.io/zh-cn/">Hexo的官方网站</a></p></blockquote><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>平时使用Typora编辑md文件，它提供富文本/markdown编辑<br>vscode，我安装了两个插件 Markdown All in One、Markdown Preview Github Styling，一个是对markdown的多方面支持，一个是在编辑的同时预览效果  </p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用 <strong>Hexo</strong> 写博客这个想法是最近有的，之前用过 <strong>wordpress</strong>，<strong>csdn</strong> 这些平台，都使用富文本编辑来操作的，第一次使用markdown的语法来写  </p><p>前年薅了一把腾讯的羊毛，买了个云服务器配置不错，一直没用，以前学习的时候玩过阿里云的服务器，是当时推出的大学生优惠政策，合一年100多块钱（只是服务器），备案了一个域名，后来工作之后用的也比较少  </p><p>说这些，是因为前段时间看到了code-server在线IDE，可以在服务器上编辑代码，使用hexo也在想如何多端同步进行编辑，所以搭建了这个IDE，安装了git,node,hexo等常用环境  </p><p>平时会对一些技术感兴趣，在vscode上面安装了一个插件，<strong>Code Runner</strong>，可以运行多种编程语言，在浏览器就可以进行代码编辑/编译，挺方便</p><p>这是使用markdown写的第一篇文章，体验不错！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/21/hello-world/"/>
    <url>/2021/03/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
